                    _______________PART 1_______________
                        THIS IS BUILDING THE backend
*protip: use the docs for express and sql, it's almost just copy paste with
a few edits to make the sync between your server and db.

Assign your port
Make sure express is installed & required, assign app = express()
Require bodyparser and use  for parsing, make sure you globally parse JSON

import the database via db=require(DB../PATH../HERE)

serve the server (client/server relation)

create your routes with appropriate paths to controllers (app.get, app.post)
(remember to import controllers so you can use in routes)

Use app.listen with a console log to ensure server is running


                    _______________PART 2_______________
                      THIS IS BUILDING THE static frontend
* use React docs*
set up the render in index.jsx
Create a static app and test incrementally that the app renders with a div&text

Create components and render static data in them, import those components in App
test if those components render static data properly when held in App.


                    _______________PART 3_______________
                        THIS IS RENDERING DYNAMIC DATA
Currently have static data rendering, and with now creating a GET request using axios
Axios will use the server, and see app.get('/cows', and then a cb to controllers)
Inside of server we have controllers we send server status and data to the models
The models have the actual query string and a callback to the database.
After each of these steps is complete axios will **.then** take the response from the server
And use that response.data to setState
              THIS IS the getCows functionality.

We then use this data we've gotten from the server and after binding the get request to app
we can then use props to pass down this information throughout the App, because its a tree.
in the render and return of app where we hold all of our components we pass cows={this.state.cows}
inside of the actual Entry.jsx file we will access props to display data dynamically.
                       THIS IS RENDERING DYNAMIC DATA


                    _______________PART 4_______________
                       THIS IS HANDLING EVENTS & FORM

                  THIS IS addCow() FRONTEND FUNCTIONALITY
Create axios post to send the new cow to database
 .then call getCows to rerender

Pass addCow to the Form component

Create input eHandlers to target a key and change its value with setState

Create submit eHandler that calls addCow with the state of Form as parameters
the state of Forms parameters here are the information in the little input box
fields, so it'll set state with just the information in the input fields
lifting state up to the App, adding the new cow derived from Form components inputs.

                  THIS IS addCow() BACKEND FUNCTIONALITY
sets up app.post ROUTE, with the path to /cows, and a callback to controllers.

In controllers we have models imported and send req.body (the json data)
to the models addCow function, we also send the server status with the data.

Models addCow takes in the cow which is the req.body from controllers
with that we set up the actualy db.query that will insert the new cow and its
respective properties into the database!


                    _______________PART 4_______________

                  THIS IS deleteCow() BACKEND FUNCTIONALITY

goes to server which holds the app.delete ROUTE
 which carries the cows/:id for path and callback to controllers

 In controllers deleteCow sends req.paramid to the models and server status&data

 Models has the deleteCow function that takes in the id and a callback.
 the ID passed into deleteCow from controllres is used in the db.query which
 uses proper syntax to select the cow with that ID and proceeds to delete that cow from the database.




                    _______________PART 5_______________
